#!/usr/bin/env bash

declare -A colors
TMP_DIR="${PWD}/.tmp"

pretty() {
  colors+=(
    ["black"]='\e[0;30m'
    ["red"]='\e[0;31m'
    ["green"]='\e[0;32m'
    ["orange"]='\e[0;33m'
    ["blue"]='\e[0;34m'
    ["purple"]='\e[0;35m'
    ["cyan"]='\e[0;36m'
    ["light_gray"]='\e[0;37m'
    ["dark_gray"]='\e[1;30m'
    ["light_red"]='\e[1;31m'
    ["light_green"]='\e[1;32m'
    ["yellow"]='\e[1;33m'
    ["light_blue"]='\e[1;34m'
    ["light_purple"]='\e[1;35m'
    ["light_cyan"]='\e[1;36m'
    ["white"]='\e[1;37m'
  )
  key=${1:-white}
  echo -e "${colors[${key}]}${*:2}\e[0m" >&2
}

_image() {
  docker ps | grep "${1}" | awk '{print $2}'
}

_remove_running_job() {
  if [ "$(docker ps | grep job_${MKDKR_JOB_NAME})" != "" ]; then
    pretty "purple" "image changed, from: $(_image job_${MKDKR_JOB_NAME}) to: ${IMAGE}"
    docker rm -f "job_${MKDKR_JOB_NAME}" >&2
  fi
}

_implicit_job() {

  TYPE="${1}"

  if [ "${TYPE}" != "job" ] &&
    [ "${TYPE}" != "service" ] &&
    [ "${TYPE}" != "privileged" ]; then
    echo true
  else
    echo false
  fi
}

_branch_or_tag_name() {
  _BRANCH=""
  if [ "$GITHUB_ACTIONS" == "true" ]; then
    _BRANCH="$(echo $GITHUB_REF | cut -d'/' -f3-)"
  elif [ "$GITLAB_CI" == "true" ]; then
    _BRANCH="$CI_COMMIT_REF_NAME"
  elif [ "$JENKINS_URL" != "" ]; then
    _BRANCH="$GIT_BRANCH"
  elif [ "$TRAVIS" == "true" ]; then
    _BRANCH="$TRAVIS_BRANCH"
  elif [ "$CIRCLECI" == "true" ]; then
    if [ "$CIRCLE_TAG" != "" ]; then
      _BRANCH="$CIRCLE_TAG"
    else
      _BRANCH="$CIRCLE_BRANCH"
    fi
  elif [ "$(git rev-parse --is-inside-work-tree)" == true ]; then
    _BRANCH="$(git rev-parse --abbrev-ref HEAD)"
  fi
  echo "$_BRANCH"
}

_header() {
  cat <<EOF
.EXPORT_ALL_VARIABLES:
.ONESHELL:
SHELL = /bin/bash

MKDKR_BRANCH_NAME=$MKDKR_BRANCH_NAME
MKDKR_BRANCH_NAME_SLUG=$MKDKR_BRANCH_NAME_SLUG

define . =
  . .mkdkr
  \$(eval MKDKR_JOB_NAME=\$(shell . .mkdkr; .... \$(@)))
  \$(eval MKDKR_JOB_STDOUT="${TMP_DIR}/\${MKDKR_JOB_NAME}.log")
  trap . EXIT
  pretty "orange" "\n\$(@)\n"
endef

define stdout =
if [ -f \$(MKDKR_JOB_STDOUT) ]; then cat \$(MKDKR_JOB_STDOUT); fi
endef
EOF
}

....() {
  if [ -z "${MKDKR_JOB_NAME}" ]; then
    _MKDKR_JOB_NAME=$(echo "${1}_$(cat /proc/sys/kernel/random/uuid)" | sed 's/\//_/g')
    export MKDKR_JOB_NAME="${_MKDKR_JOB_NAME}"
  fi
  echo "${MKDKR_JOB_NAME}"
}

# shellcheck disable=SC1036
...() {
  OLDIFS=$IFS
  IFS='â €' # Braille Pattern Blank (U+2800)
  TYPE="${1}"
  IMAGE="${2}"
  ARGS="${*:3}"

  if [ "$(_implicit_job "${TYPE}")" == true ]; then
    ARGS="${*:2}"
    IMAGE="${TYPE}"
    TYPE="job"
  fi

  _remove_running_job

  pretty "cyan" "... ${TYPE} ${IMAGE} ${ARGS[*]}"

  if [ "${TYPE}" == "service" ]; then
    docker run --rm -d \
      -v "${PWD}":"${PWD}" \
      --workdir "${PWD}" \
      $ARGS \
      --name "service_${MKDKR_JOB_NAME}" \
      "${IMAGE}" >&2
  else
    if [ "${TYPE}" == "privileged" ]; then
      PRIVILEGED=(--privileged -v /var/run/docker.sock:/var/run/docker.sock)
    fi

    SERVICE=$(_image "service_${MKDKR_JOB_NAME}" | sed 's/:.*//g;s/\//_/g')
    if [ "${SERVICE}" != "" ]; then
      SERVICES=(--link "service_${MKDKR_JOB_NAME}:${SERVICE}")
    fi

    docker run --rm -d \
      -v "${PWD}":"${PWD}" \
      --workdir "${PWD}" \
      --entrypoint "" \
      $ARGS \
      ${PRIVILEGED[@]} \
      ${SERVICES[@]} \
      --name "job_${MKDKR_JOB_NAME}" \
      "${IMAGE}" sleep "${MKDKR_TTL:-3600}" >&2
  fi
  IFS=$OLDIFS
}

# shellcheck disable=SC1036
..() {
  CONTAINER_NAME="job_${MKDKR_JOB_NAME}"

  pretty "green" ".. ${*}"

  docker exec -i ${CONTAINER_NAME} ${MKDKR_SHELL:-sh} -c "$*" | tee "${TMP_DIR}/${MKDKR_JOB_NAME}.log"
  EXIT_CODE="${PIPESTATUS[0]}"
  if [ "${EXIT_CODE}" != "0" ]; then
    .
    exit "${EXIT_CODE}"
  fi
}

.() {
  ALIVE=$(docker ps | grep "${MKDKR_JOB_NAME}" | awk '{print $1}')
  if [ "${ALIVE[0]}" != "" ]; then
    pretty "green" "."
    docker ps | grep "${MKDKR_JOB_NAME}" | awk '{print $1}' | xargs -i{} docker rm -f {} >&2
    rm "${TMP_DIR}/${MKDKR_JOB_NAME}.log"
  fi
}

if [ "$1" == "init" ]; then

  mkdir -p "${TMP_DIR}"

  find "${TMP_DIR}" -name "mkdkr_header_*.mk" -type f -mmin +60 -delete

  MKDKR_BRANCH_NAME="$(_branch_or_tag_name)"
  MKDKR_BRANCH_NAME_SLUG="$(echo $MKDKR_BRANCH_NAME | sed -r 's/\/|_/-/g' | tr '[:upper:]' '[:lower:]')"

  _MKDKR_INCLUDES="${TMP_DIR}/mkdkr_header_$(cat /proc/sys/kernel/random/uuid).mk"

  if [ ! -f "${_MKDKR_INCLUDES}" ]; then
    _header >"${_MKDKR_INCLUDES}"
  fi

  # include from remote git
  declare -a _MKDKR_INCLUDES_LIST=()

  if [ -f mkdkr.csv ]; then
    pretty "orange" "\ninclude\n"
    while IFS= read -r LINE; do
      PARAMS=($(echo "$LINE" | tr "," " "))
      ALIAS="${PARAMS[0]}"

      if [ -z "${PARAMS[1]}" ]; then
        echo "Needs git path to clone for: ${ALIAS}"
        exit 1
      fi

      REPOS="${PARAMS[1]}"
      CHECKOUT="master"
      FILE="main.mk"

      if [ "${PARAMS[2]}" ]; then
        CHECKOUT="${PARAMS[2]}"
      fi

      if [ "${PARAMS[3]}" ]; then
        FILE="${PARAMS[3]}"
      fi

      mkdir -p "${TMP_DIR}/includes"

      if [ -d "${TMP_DIR}/includes/${ALIAS}" ]; then
        pretty "light_cyan" "update, alias: ${ALIAS}, repos: ${REPOS}, checkout: ${CHECKOUT}, file: ${FILE}"
        git -C "${TMP_DIR}/includes/${ALIAS}/" pull --depth "${MKDKR_INCLUDE_CLONE_DEPTH:-1}" origin "$CHECKOUT" >&2
        git -C "${TMP_DIR}/includes/${ALIAS}/" reset --hard "origin/${CHECKOUT}" >&2
      else
        pretty "light_cyan" "clone, alias: ${ALIAS}, repos: ${REPOS}, checkout: ${CHECKOUT}, file: ${FILE}"
        git clone "${REPOS}" --branch "${CHECKOUT}" --depth "${MKDKR_INCLUDE_CLONE_DEPTH:-1}" "${TMP_DIR}/includes/${ALIAS}" >&2
      fi

      _MKDKR_INCLUDES_LIST+=("${TMP_DIR}/includes/${ALIAS}/${FILE}")
    done < <(grep -v '^ *#' <mkdkr.csv)
  fi

  echo "${_MKDKR_INCLUDES} ${_MKDKR_INCLUDES_LIST[*]}"
fi
